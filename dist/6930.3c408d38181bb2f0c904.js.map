{"version":3,"file":"6930.3c408d38181bb2f0c904.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://telegram-t/./src/components/modals/stars/BalanceBlock.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://telegram-t/./src/components/modals/stars/helpers/transaction.ts","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.module.scss?2bf6","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.tsx","webpack://telegram-t/./src/hooks/animations/useTransitionActiveKey.ts","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://telegram-t/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://telegram-t/./src/components/modals/gift/GiftComposer.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://telegram-t/./src/components/modals/gift/GiftItemPremium.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItemStar.tsx","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://telegram-t/./src/components/modals/gift/GiftModal.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.module.scss?ae9e","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.module.scss?3366","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.module.scss?287b","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.tsx","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/hooks/usePeerSearch.ts","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.module.scss?be1f","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.tsx","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/common/richinput/RichInput.module.scss?fef1","webpack://telegram-t/./src/components/common/richinput/RichInput.tsx","webpack://telegram-t/./src/components/common/richinput/useRichInput.tsx","webpack://telegram-t/./src/components/modals/common/TableAboutModal.module.scss?0459","webpack://telegram-t/./src/components/modals/common/TableAboutModal.tsx","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"MFXAwnxJ\",\"content\":\"Sl6xVf1R\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst AVATAR_SIZE = 100;\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        url={oldLang('StarsTOSLink')}\n        text={oldLang('lng_credits_summary_options_about_link')}\n      />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog)}\n      contentClassName={styles.content}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size={AVATAR_SIZE}\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getPeerTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(global, modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = unique([\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ]);\n\n    const filteredUserIds = filterPeersByQuery({\n      ids: combinedIds, query: searchQuery, type: 'user',\n    });\n\n    return sortChatIds(filteredUserIds.filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"minimal\":\"nkV4JXHc\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"sectionTitle\":\"FF8gm7MP\",\"tos\":\"Vu6blJk9\",\"logo\":\"sjhpNB8l\",\"logoBackground\":\"jjESKN3H\",\"headerHext\":\"xbpAOr37\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"addStarsButton\":\"dqnGL2uh\",\"addStarsIcon\":\"w9Db2eiK\",\"balanceBlock\":\"Yk0OQBKC\",\"balanceInfo\":\"p2dW9NOV\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\n\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: ApiStarsAmount;\n  withAddButton?: boolean;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className, withAddButton }: OwnProps) => {\n  const lang = useLang();\n\n  const {\n    openStarsBalanceModal,\n  } = getActions();\n\n  return (\n    <div className={buildClassName(styles.balanceBlock, className)}>\n      <div className={styles.balanceInfo}>\n        <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n        <div className={styles.balanceBottom}>\n          <StarIcon type=\"gold\" size=\"middle\" />\n          {balance !== undefined ? formatStarsAmount(lang, balance) : '…'}\n          {withAddButton && (\n            <BadgeButton\n              className={styles.addStarsButton}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openStarsBalanceModal({})}\n            >\n              <Icon\n                className={styles.addStarsIcon}\n                name=\"add\"\n              />\n            </BadgeButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"subtitle\":\"YN2J8dw6\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{renderText(getPeerTitle(lang, peer) || '')}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {renderText(title)}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsAmount, ApiStarsTransaction } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { buildStarsTransactionCustomPeer } from '../../../../global/helpers/payments';\nimport {\n  type LangFn,\n} from '../../../../util/localization';\nimport { formatPercent } from '../../../../util/textFormat';\n\nexport function getTransactionTitle(oldLang: OldLangFn, lang: LangFn, transaction: ApiStarsTransaction) {\n  if (transaction.paidMessages) {\n    return lang(\n      'PaidMessageTransaction',\n      { count: transaction.paidMessages },\n      {\n        withNodes: true,\n        pluralValue: transaction.paidMessages,\n      },\n    );\n  }\n  if (transaction.starRefCommision) {\n    return oldLang('StarTransactionCommission', formatPercent(transaction.starRefCommision));\n  }\n  if (transaction.isGiftUpgrade) return oldLang('Gift2TransactionUpgraded');\n  if (transaction.extendedMedia) return oldLang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || oldLang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return oldLang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return oldLang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return oldLang('StarsGiftSent');\n  if (transaction.isGift) return oldLang('StarsGiftReceived');\n  if (transaction.starGift) {\n    return isNegativeStarsAmount(transaction.stars) ? oldLang('Gift2TransactionSent') : oldLang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n    && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n  if (customPeer) return customPeer.title || oldLang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n\nexport function isNegativeStarsAmount(starsAmount: ApiStarsAmount) {\n  if (starsAmount.amount) return starsAmount.amount < 0;\n  return starsAmount.nanos < 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\",\"uniqueGiftBackground\":\"eNvzMw2p\",\"giftSticker\":\"U3dqmnM4\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport renderText from '../../../common/helpers/renderText';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nconst GIFT_STICKER_SIZE = 36;\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    stars,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n  const starGift = transaction.starGift;\n  const isUniqueGift = starGift?.type === 'starGiftUnique';\n  const giftSticker = starGift && getStickerFromGift(starGift);\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(oldLang, lang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (transaction.peer.type === 'peer') {\n      description = peer && getPeerTitle(oldLang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction.peer);\n      title = customPeer.title || oldLang(customPeer.titleKey!);\n      description = oldLang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.isGiftUpgrade && transaction.starGift?.type === 'starGiftUnique') {\n      description = transaction.starGift.title;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = oldLang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = oldLang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = oldLang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [oldLang, lang, peer, transaction]);\n\n  const previewContent = useMemo(() => {\n    if (isUniqueGift) {\n      const { backdrop } = getGiftAttributes(starGift)!;\n      const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n      return (\n        <>\n          <RadialPatternBackground\n            className={styles.uniqueGiftBackground}\n            backgroundColors={backgroundColors}\n          />\n          <AnimatedIconFromSticker\n            className={styles.giftSticker}\n            sticker={giftSticker}\n            size={GIFT_STICKER_SIZE}\n            play={false}\n          />\n        </>\n      );\n    }\n\n    if (giftSticker) {\n      return (\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={GIFT_STICKER_SIZE}\n          play={false}\n        />\n      );\n    }\n\n    if (extendedMedia) {\n      return <PaidMediaThumb media={extendedMedia} isTransactionPreview />;\n    }\n\n    return (\n      <>\n        <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </>\n    );\n  }, [isUniqueGift, extendedMedia, photo, data.avatarPeer, subscriptionPeriod, starGift, giftSticker]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {previewContent}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        {data.description && (\n          <p className={styles.description}>{renderText(data.description)}</p>\n        )}\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, oldLang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span\n          className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n        >\n          {formatStarsTransactionAmount(lang, stars)}\n        </span>\n        <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport { PAID_MESSAGES_PURPOSE } from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarLogo from '../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS_KEYS: RegularLangKey[] = [\n  'StarsTransactionsAll',\n  'StarsTransactionsIncoming',\n  'StarsTransactionsOutgoing',\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  canBuyPremium?: boolean;\n  shouldForceHeight?: boolean;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, canBuyPremium, shouldForceHeight,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n  } = getActions();\n\n  const { balance, history, subscriptions } = starsBalanceState || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && starsBalanceState);\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance?.amount || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const peer = selectUser(global, originGift.peerId);\n      if (!peer) return undefined;\n      return oldLang('StarsNeededTextGift', getPeerTitle(lang, peer));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    if (topup?.purpose === PAID_MESSAGES_PURPOSE) {\n      return lang('StarsNeededTextSendPaidMessages', undefined, {\n        withMarkdown: true,\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, lang, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  const transactionTabs: TabWithProperties[] = useMemo(() => {\n    return TRANSACTION_TABS_KEYS.map((key) => ({\n      title: lang(key),\n    }));\n  }, [lang]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName(styles.root, !shouldForceHeight && !areBuyOptionsShown && styles.minimal)}\n      isOpen={isOpen}\n      onClose={closeStarsBalanceModal}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <BalanceBlock balance={balance} className={styles.modalBalance} />\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n          <h2 className={styles.headerText}>\n            {starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          </h2>\n          <div className={styles.description}>\n            {renderText(\n              starsNeededText || oldLang('TelegramStarsInfo'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          {canBuyPremium && !areBuyOptionsShown && (\n            <Button\n              className={styles.starButton}\n              onClick={showBuyOptions}\n            >\n              {oldLang('Star.List.BuyMoreStars')}\n            </Button>\n          )}\n          {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n            <Button\n              isText\n              noForcedUpperCase\n              className={styles.starButton}\n              onClick={openStarsGiftingPickerModalHandler}\n            >\n              {oldLang('TelegramStarsGift')}\n            </Button>\n          )}\n          {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n            <StarTopupOptionList\n              starsNeeded={starsNeeded}\n              options={starsBalanceState.topupOptions}\n              onClick={handleBuyStars}\n            />\n          )}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.section}>\n              <Transition\n                name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS_KEYS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                  noScrollRestoreOnTop\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={transactionTabs}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const shouldForceHeight = Boolean(global.stars?.history?.all?.transactions.length);\n\n    return {\n      shouldForceHeight,\n      starsBalanceState: global.stars,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(StarsBalanceModal));\n","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PeerChip from '../../common/PeerChip';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => !!media.duration);\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance.amount) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PeerChip className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, { asFont: true }),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {disclaimerText && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"irv1C8bo\",\"radialPattern\":\"UvhsGZLf\",\"sticker\":\"a1ASgPwu\",\"transition\":\"Tu6_OHoq\",\"transitionSlide\":\"iUTKLzTN\",\"title\":\"ECTvfOda\",\"subtitle\":\"S6JwvHWD\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiStarGiftAttributeBackdrop, ApiStarGiftAttributeModel, ApiStarGiftAttributePattern,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Transition from '../../ui/Transition';\n\nimport styles from './UniqueGiftHeader.module.scss';\n\ntype OwnProps = {\n  modelAttribute: ApiStarGiftAttributeModel;\n  backdropAttribute: ApiStarGiftAttributeBackdrop;\n  patternAttribute: ApiStarGiftAttributePattern;\n  title?: string;\n  subtitle?: string;\n  className?: string;\n};\n\nconst STICKER_SIZE = 120;\n\nconst UniqueGiftHeader = ({\n  modelAttribute,\n  backdropAttribute,\n  patternAttribute,\n  title,\n  subtitle,\n  className,\n}: OwnProps) => {\n  const activeKey = useTransitionActiveKey([modelAttribute, backdropAttribute, patternAttribute]);\n  const subtitleColor = backdropAttribute?.textColor;\n\n  const radialPatternBackdrop = useMemo(() => {\n    const backdropColors = [backdropAttribute.centerColor, backdropAttribute.edgeColor];\n    const patternColor = backdropAttribute.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternAttribute.sticker}\n      />\n    );\n  }, [backdropAttribute, patternAttribute]);\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <Transition\n        className={styles.transition}\n        slideClassName={styles.transitionSlide}\n        activeKey={activeKey}\n        direction={1}\n        name=\"zoomBounceSemiFade\"\n      >\n        {radialPatternBackdrop}\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={modelAttribute.sticker}\n          size={STICKER_SIZE}\n        />\n      </Transition>\n      {title && <h1 className={styles.title}>{title}</h1>}\n      {subtitle && (\n        <p className={styles.subtitle} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n          {subtitle}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default memo(UniqueGiftHeader);\n","import { useMemo, useRef } from '../../lib/teact/teact';\n\n/**\n * Use this hook to bind `<Transition />` animation to changes in the dependency array.\n * Use optional parameter `noAnimation` if you want to prevent the animation even if the dependency array changes.\n*/\nexport function useTransitionActiveKey(deps: unknown[], noAnimation?: boolean): number {\n  const activeKey = useRef(0);\n  let didUpdate = false;\n\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  useMemo(() => { activeKey.current += 1; didUpdate = true; }, deps);\n\n  if (noAnimation && didUpdate) activeKey.current -= 1;\n\n  return activeKey.current;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"uniqueGift\":\"ApoQz22o\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"totalStars\":\"Z2YALGgl\",\"starIcon\":\"cU5QlvwL\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageLink } from '../../../../global/helpers';\nimport {\n  buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n} from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../../gift/UniqueGiftHeader';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n  paidMessageCommission?: number;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal, peer, canPlayAnimatedEmojis, topSticker, paidMessageCommission,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo, stars, isGiftUpgrade, starGift,\n    } = transaction;\n\n    const gift = transaction?.starGift;\n    const isUniqueGift = gift?.type === 'starGiftUnique';\n    const sticker = transaction?.starGift ? getStickerFromGift(transaction.starGift) : topSticker;\n\n    const giftAttributes = isUniqueGift ? getGiftAttributes(gift) : undefined;\n\n    const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n        && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, lang, transaction);\n\n    const messageLink = peer && transaction.messageId && !isGiftUpgrade\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId && getMessageLink(peer, undefined, giveawayPostId);\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description\n      || (isGiftUpgrade && starGift?.type === 'starGiftUnique' ? starGift.title : undefined)\n      || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !sticker;\n    const avatarPeer = !photo ? (peer || customPeer) : undefined;\n\n    const uniqueGiftHeader = isUniqueGift && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && sticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={sticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar peer={avatarPeer} webPhoto={photo} size=\"giant\" />\n        )}\n        {!sticker && (\n          <img\n            className={buildClassName(styles.starsBackground)}\n            src={StarsBackground}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {title && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span\n            className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n          >\n            {formatStarsTransactionAmount(lang, stars)}\n          </span>\n          <StarIcon type=\"gold\" size=\"middle\" />\n        </p>\n        {transaction.paidMessages && transaction.starRefCommision && paidMessageCommission\n        && (\n          <p className={styles.description}>\n            {lang(\n              'PaidMessageTransactionDescription',\n              { percent: formatPercent(paidMessageCommission / 10) },\n              {\n                withNodes: true,\n                withMarkdown: true,\n              },\n            )}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    if (transaction && !transaction.paidMessages) {\n      tableData.push([\n        oldLang('StarsTransaction.StarRefReason.Title'),\n        oldLang('StarsTransaction.StarRefReason.Program'),\n      ]);\n    }\n\n    if (isGiftUpgrade) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        oldLang('StarGiftReasonUpgrade'),\n      ]);\n    }\n\n    let peerLabel;\n    if (isGiftUpgrade) {\n      peerLabel = oldLang('Stars.Transaction.GiftFrom');\n    } else if (isNegativeStarsAmount(stars) || transaction.isMyGift) {\n      peerLabel = oldLang('Stars.Transaction.To');\n    } else if (transaction.starRefCommision && !transaction.paidMessages) {\n      peerLabel = oldLang('StarsTransaction.StarRefReason.Miniapp');\n    } else if (peerId) {\n      peerLabel = oldLang('Star.Transaction.From');\n    } else {\n      peerLabel = oldLang('Stars.Transaction.Via');\n    }\n\n    tableData.push([\n      peerLabel,\n      peerId ? { chatId: peerId } : toName || '',\n    ]);\n\n    if (transaction.starRefCommision && transaction.paidMessages) {\n      tableData.push([\n        lang('PaidMessageTransactionTotal'),\n        formatStarsAsIcon(lang,\n          transaction.stars.amount / ((100 - transaction.starRefCommision) / 100),\n          { asFont: false, className: styles.starIcon, containerClassName: styles.totalStars }),\n      ]);\n    }\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.stars, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header: isUniqueGift ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, lang, peer, canPlayAnimatedEmojis, topSticker, paidMessageCommission]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      hasBackdrop={transaction?.starGift?.type === 'starGiftUnique'}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n    const paidMessageCommission = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    const starCount = modal?.transaction.stars;\n    const starsGiftSticker = modal?.transaction.isGift && selectGiftStickerForStars(global, starCount?.amount);\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starsGiftSticker,\n      paidMessageCommission,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"avatarWrapper\":\"wuTMXDP9\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={styles.header}>\n        <div className={styles.avatarWrapper}>\n          <Avatar peer={!photo ? peer : undefined} webPhoto={photo} size=\"giant\" />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const floatingBadgeRef = useRef<HTMLDivElement>(null);\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress}>\n        <Sparkles preset=\"progress\" className={styles.sparkles} />\n      </div>\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"itemInfo\":\"nS9V516D\",\"itemTitle\":\"sH5Nukjy\",\"itemSubtitle\":\"dHlNODTI\",\"itemIcon\":\"H_iHihXU\",\"sendAsPeerButtonAvatar\":\"_mjvLELm\",\"sendAsPeerMenuButton\":\"zxsRaWYV\",\"buttonDownIcon\":\"zrwUUELS\",\"sendAsPeerMenuBubble\":\"X1PB6mhQ\",\"sendAsPeerMenu\":\"Px1MDij9\",\"sendAsPeersMenuContainer\":\"Al1nfhHJ\",\"headerControlPanel\":\"vu90kSL_\",\"separator\":\"uhQLUjmo\",\"checkBox\":\"Mc3bVeF0\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"disclaimer\":\"KRvkHeo1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPaidReactionPrivacyType,\n  ApiPeer,\n  ApiSendAsPeerId,\n  ApiStarsAmount, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectPeer, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: ApiStarsAmount;\n  defaultPrivacy?: ApiPaidReactionPrivacyType;\n  sendPaidReactionsAsPeerIds?: ApiSendAsPeerId[];\n  currentUserId: string;\n  currentUser: ApiUser;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMy?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiPeer;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n  sendPaidReactionsAsPeerIds,\n  currentUserId,\n  currentUser,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction, loadSendPaidReactionsAs } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldSendAsAnonymous, setShouldSendAsAnonymous] = useState(true);\n  const [sendAsPeerId, setSendAsPeerId] = useState(currentUserId);\n\n  const chatId = chat?.id;\n\n  const senderPeer = sendAsPeerId ? (selectPeer(getGlobal(), sendAsPeerId)) : currentUser;\n\n  const oldLang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const lang = useLang();\n\n  const handleShowInTopSendersChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldSendAsAnonymous(!e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (chatId && !sendPaidReactionsAsPeerIds) {\n      loadSendPaidReactionsAs({ chatId });\n    }\n  }, [chatId, sendPaidReactionsAsPeerIds]);\n\n  const filteredMyReactorIds = useMemo(() => {\n    const result = sendPaidReactionsAsPeerIds?.map((peer) => peer.id)\n      .filter((id) => id !== chatId);\n    result?.unshift(currentUserId);\n    return result;\n  }, [sendPaidReactionsAsPeerIds, chatId, currentUserId]);\n\n  const canChangeSendAsPeer = filteredMyReactorIds && filteredMyReactorIds.length > 1;\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMy);\n    if (currentReactor) {\n      setShouldSendAsAnonymous(Boolean(currentReactor.isAnonymous));\n      if (currentReactor.peerId) {\n        setSendAsPeerId(currentReactor.peerId);\n      }\n      return;\n    }\n\n    setShouldSendAsAnonymous(defaultPrivacy?.type === 'anonymous' || false);\n    if (defaultPrivacy?.type === 'peer' && filteredMyReactorIds?.includes(defaultPrivacy.peerId)) {\n      setSendAsPeerId(defaultPrivacy.peerId);\n      return;\n    }\n\n    setSendAsPeerId(currentUserId);\n  }, [defaultPrivacy, message?.reactions?.topReactors, filteredMyReactorIds, currentUserId]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: shouldSendAsAnonymous,\n      peerId: shouldSendAsAnonymous || sendAsPeerId === currentUserId ? undefined : sendAsPeerId,\n      shouldIgnoreDefaultPrivacy: true,\n    });\n    closePaidReactionModal();\n  });\n\n  const handleSendAsPeerChange = useLastCallback((peerId: string) => {\n    setShouldSendAsAnonymous(false);\n    setSendAsPeerId(peerId);\n  });\n\n  const renderMenuItem = useLastCallback((peerId: string) => {\n    const peer = selectPeer(getGlobal(), peerId);\n    const isSelected = sendAsPeerId === peerId && !shouldSendAsAnonymous;\n    if (!peer) return undefined;\n\n    return (\n      <MenuItem\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleSendAsPeerChange(peerId)}\n      >\n        <Avatar\n          size=\"small\"\n          peer={peer}\n        />\n        <div className={buildClassName(styles.itemInfo)}>\n          <FullNameTitle className={styles.itemTitle} peer={peer} noFake noVerified />\n          <span className={styles.itemSubtitle}>\n            {isApiPeerUser(peer) ? lang('PeerPersonalAccount') : lang('PeerChannel')}\n          </span>\n        </div>\n        <Icon\n          className={styles.itemIcon}\n          name={isSelected ? 'check' : 'placeholder'}\n        />\n      </MenuItem>\n    );\n  });\n\n  const SendAsPeerMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.sendAsPeerMenuButton, isOpen ? 'active' : '')}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Avatar\n          className={styles.sendAsPeerButtonAvatar}\n          size=\"mini\"\n          peer={shouldSendAsAnonymous ? ANONYMOUS_PEER : senderPeer}\n        />\n        <Icon\n          name=\"down\"\n          className={styles.buttonDownIcon}\n        />\n      </Button>\n    );\n  }, [isMobile, lang, senderPeer, shouldSendAsAnonymous]);\n\n  const sendAsPeersMenu = useMemo(() => {\n    if (!canChangeSendAsPeer) return undefined;\n    return (\n      <DropdownMenu\n        className={buildClassName(styles.sendAsPeerMenu, 'with-menu-transitions')}\n        bubbleClassName={styles.sendAsPeerMenuBubble}\n        trigger={SendAsPeerMenuButton}\n        positionX=\"right\"\n        autoClose\n      >\n        {filteredMyReactorIds.map((id) => (\n          renderMenuItem(id)\n        ))}\n      </DropdownMenu>\n    );\n  }, [SendAsPeerMenuButton, filteredMyReactorIds, canChangeSendAsPeer]);\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasCurrentSender = false;\n    let myReactorAmount = 0;\n\n    all.forEach((reactor) => {\n      const peer = reactor.peerId ? selectPeer(global, reactor.peerId) : undefined;\n      if (!peer && !reactor.isAnonymous && !reactor.isMy) return;\n      if (reactor.isMy) {\n        myReactorAmount = reactor.count;\n      }\n\n      if (reactor.isMy && (reactor.peerId !== sendAsPeerId || (reactor.isAnonymous && !shouldSendAsAnonymous))) return;\n\n      const isCurrentReactor = sendAsPeerId === reactor.peerId || (shouldSendAsAnonymous && reactor.isAnonymous);\n\n      if (isCurrentReactor) {\n        hasCurrentSender = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: isCurrentReactor && isTouched ? starsAmount : 0,\n        isMy: reactor.isMy,\n        isAnonymous: reactor.isAnonymous,\n        user: peer,\n      });\n    });\n\n    if (!hasCurrentSender) {\n      const sender = selectPeer(global, sendAsPeerId);\n      result.push({\n        amount: myReactorAmount,\n        localAmount: isTouched ? starsAmount : 0,\n        isMy: true,\n        user: sender,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount, sendAsPeerId, shouldSendAsAnonymous]);\n\n  const chatTitle = chat && getPeerTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n      isLowStackPriority\n    >\n      <div className={styles.sendAsPeersMenuContainer}>\n        {sendAsPeersMenu}\n      </div>\n      <div className={styles.headerControlPanel}>\n        <BalanceBlock balance={starBalance} className={styles.modalBalance} withAddButton />\n      </div>\n\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMy && shouldSendAsAnonymous))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey)\n              : peer && getPeerTitle(oldLang, peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      {topReactors && (<Separator className={styles.separator} />) }\n      <Checkbox\n        className={buildClassName(styles.checkBox, 'dialog-checkbox')}\n        checked={!shouldSendAsAnonymous}\n        onChange={handleShowInTopSendersChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n    const sendPaidReactionsAsPeerIds = chat?.sendPaidReactionsAsPeerIds;\n    const currentUserId = global.currentUserId!;\n    const currentUser = selectUser(global, currentUserId)!;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n      sendPaidReactionsAsPeerIds,\n      currentUserId,\n      currentUser,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"switcherStarIcon\":\"zAee80Dv\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\",\"background\":\"ZORVRSG3\",\"customBgImage\":\"Eny_G3JI\",\"customBgColor\":\"TkJZPU2u\",\"withTransition\":\"soDpW2YR\",\"blurred\":\"M6k91TdM\",\"withRightColumn\":\"FBcNO8hj\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey, WallPaperPatternThemeSettings } from '../../../types';\nimport type { GiftOption } from './GiftModal';\nimport {\n  type ApiFormattedText, type ApiMessage, type ApiPeer,\n  type ApiStarsAmount, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectPeerPaidMessagesStars, selectTabState, selectTheme, selectThemeValues, selectUserFullInfo,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { useRichInput } from '../../common/richinput/useRichInput';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { usePatternBg } from '../../../hooks/usePatternBg';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport RichInput from '../../common/richinput/RichInput';\nimport ActionMessage from '../../middle/message/ActionMessage';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  giftByStars?: GiftOption;\n  peerId: string;\n};\n\nexport type StateProps = {\n  fill?: WallPaperPatternThemeSettings;\n  captionLimit?: number;\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  peer?: ApiPeer;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n  starBalance?: ApiStarsAmount;\n  paidMessagesStars?: number;\n  areUniqueStarGiftsDisallowed?: boolean;\n  shouldDisallowLimitedStarGifts?: boolean;\n};\n\nfunction GiftComposer({\n  fill,\n  gift,\n  giftByStars,\n  peerId,\n  peer,\n  captionLimit,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  backgroundColor,\n  customBackground,\n  currentUserId,\n  isPaymentFormLoading,\n  starBalance,\n  paidMessagesStars,\n  areUniqueStarGiftsDisallowed,\n  shouldDisallowLimitedStarGifts,\n}: OwnProps & StateProps) {\n  const {\n    sendStarGift, sendPremiumGiftByStars, openInvoice, openGiftUpgradeModal, openStarsBalanceModal,\n  } = getActions();\n  const solutionInputCtx = useRichInput();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<ApiFormattedText>({ text: '' });\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n  const [shouldPayForUpgrade, setShouldPayForUpgrade] = useState<boolean>(false);\n  const [shouldPayByStars, setShouldPayByStars] = useState<boolean>(false);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  useEffect(() => {\n    if (shouldDisallowLimitedStarGifts) {\n      setShouldPayForUpgrade(true);\n    }\n  }, [shouldDisallowLimitedStarGifts, shouldPayForUpgrade]);\n\n  const isStarGift = 'id' in gift;\n  const hasPremiumByStars = giftByStars && 'amount' in giftByStars;\n  const isPeerUser = peer && isApiPeerUser(peer);\n  const isSelf = peerId === currentUserId;\n\n  const localMessage = useMemo(() => {\n    if (!isStarGift) {\n      const currentGift = shouldPayByStars && hasPremiumByStars ? giftByStars : gift;\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'giftPremium',\n            amount: currentGift.amount,\n            currency: currentGift.currency,\n            months: gift.months,\n            message: giftMessage?.text.length ? giftMessage : undefined,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    return {\n      id: -1,\n      chatId: '0',\n      isOutgoing: false,\n      senderId: currentUserId,\n      date: Math.floor(Date.now() / 1000),\n      content: {\n        action: {\n          mediaType: 'action',\n          type: 'starGift',\n          message: giftMessage?.text.length ? giftMessage : undefined,\n          isNameHidden: shouldHideName || undefined,\n          starsToConvert: gift.starsToConvert,\n          canUpgrade: shouldPayForUpgrade || undefined,\n          alreadyPaidUpgradeStars: shouldPayForUpgrade ? gift.upgradeStars : undefined,\n          gift,\n          peerId,\n          fromId: currentUserId,\n        },\n      },\n    } satisfies ApiMessage;\n  }, [currentUserId, gift, giftMessage, isStarGift,\n    shouldHideName, shouldPayForUpgrade, peerId,\n    shouldPayByStars, hasPremiumByStars, giftByStars]);\n\n  const handleGiftMessageChange = useThrottledCallback(() => {\n    setGiftMessage(solutionInputCtx.editable.getFormattedText(true));\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [solutionInputCtx.editable, solutionInputCtx.editable.htmlS], 400);\n\n  useEffect(() => {\n    handleGiftMessageChange();\n  }, [handleGiftMessageChange, solutionInputCtx.editable.htmlS]);\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleShouldPayForUpgradeChange = useLastCallback(() => {\n    setShouldPayForUpgrade(!shouldPayForUpgrade);\n  });\n\n  const toggleShouldPayByStars = useLastCallback(() => {\n    if (hasPremiumByStars) setShouldPayByStars(!shouldPayByStars);\n  });\n\n  const handleOpenUpgradePreview = useLastCallback(() => {\n    if (!isStarGift) return;\n    openGiftUpgradeModal({\n      giftId: gift.id,\n      peerId,\n    });\n  });\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        peerId,\n        shouldHideName,\n        gift,\n        message: giftMessage.text ? giftMessage : undefined,\n        shouldUpgrade: shouldPayForUpgrade,\n      });\n      return;\n    }\n\n    if (shouldPayByStars && hasPremiumByStars) {\n      sendPremiumGiftByStars({\n        userId: peerId,\n        months: giftByStars.months,\n        amount: giftByStars.amount,\n        message: giftMessage?.text.length ? giftMessage : undefined,\n      });\n      return;\n    }\n\n    openInvoice({\n      type: 'giftcode',\n      userIds: [peerId],\n      currency: gift.currency,\n      amount: gift.amount,\n      option: gift,\n      message: giftMessage.text ? giftMessage : undefined,\n    });\n  });\n\n  const canUseStarsPayment = hasPremiumByStars && starBalance && (starBalance.amount > giftByStars.amount);\n  function renderOptionsSection() {\n    // const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n\n    const title = getPeerTitle(lang, peer!)!;\n    return (\n      <div className={styles.optionsSection}>\n\n        {!paidMessagesStars && (\n          <RichInput\n            richInputCtx={solutionInputCtx}\n            placeholder={lang('GiftMessagePlaceholder')}\n            limitRemaining={captionLimit ? captionLimit - giftMessage.text.length : undefined}\n            disablePreview\n          />\n        )}\n\n        {canUseStarsPayment && (\n          <ListItem className={styles.switcher} narrow ripple onClick={toggleShouldPayByStars}>\n            <span>\n              {lang('GiftPremiumPayWithStars', {\n                stars: formatStarsAsIcon(lang, giftByStars.amount, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayByStars}\n              onChange={toggleShouldPayByStars}\n              label={lang('GiftPremiumPayWithStarsAcc')}\n            />\n          </ListItem>\n        )}\n\n        {hasPremiumByStars && starBalance && (\n          <div className={styles.description}>\n            {lang('GiftPremiumDescriptionYourBalance', {\n              stars: formatStarsAsIcon(lang, starBalance.amount, { className: styles.switcherStarIcon }),\n              link: <Link isPrimary onClick={handleGetMoreStars}>{lang('GetMoreStarsLinkText')}</Link>,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n        )}\n\n        {isStarGift && gift.upgradeStars && !areUniqueStarGiftsDisallowed && (\n          <ListItem\n            className={styles.switcher}\n            narrow\n            ripple\n            onClick={handleShouldPayForUpgradeChange}\n            disabled={shouldDisallowLimitedStarGifts}\n          >\n            <span>\n              {lang('GiftMakeUnique', {\n                stars: formatStarsAsIcon(lang, gift.upgradeStars, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayForUpgrade}\n              onChange={handleShouldPayForUpgradeChange}\n              label={lang('GiftMakeUniqueAcc')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && gift.upgradeStars && !areUniqueStarGiftsDisallowed && (\n          <div className={styles.description}>\n            {isPeerUser\n              ? lang('GiftMakeUniqueDescription', {\n                user: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })\n              : lang('GiftMakeUniqueDescriptionChannel', {\n                peer: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })}\n          </div>\n        )}\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isSelf ? lang('GiftHideNameDescriptionSelf')\n              : isPeerUser ? lang('GiftHideNameDescription', { receiver: title })\n                : lang('GiftHideNameDescriptionChannel')}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const amount = shouldPayByStars && hasPremiumByStars\n      ? formatStarsAsIcon(lang, giftByStars.amount, { asFont: true })\n      : isStarGift\n        ? formatStarsAsIcon(lang, gift.stars + (shouldPayForUpgrade ? gift.upgradeStars! : 0), { asFont: true })\n        : formatCurrency(lang, gift.amount, gift.currency);\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && gift.availabilityRemains && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          size=\"smaller\"\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n          disabled={captionLimit ? captionLimit - giftMessage.text.length < 0 : false}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  const { animDivRef, bgRef } = usePatternBg(fill);\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        {/* <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        /> */}\n        <div\n          className={bgClassName}\n          style={buildStyle(\n            customBackgroundValue && `--custom-background: ${customBackgroundValue}`,\n            fill?.dark && 'background: #000;',\n          )}\n          ref={animDivRef}\n        >\n          <canvas\n            ref={bgRef}\n            style={buildStyle(\n              !fill && 'visibility: hidden;',\n              fill?.dark\n            && `\n              opacity: 0.25;\n              -webkit-mask: center repeat;\n              mask: center repeat;\n              -webkit-mask-image: var(--custom-background);\n              mask-image: var(--custom-background);\n              mask-size: 300px;\n              -webkit-mask-size: 300px;\n            `,\n            )}\n          />\n        </div>\n        <ActionMessage\n          key={isStarGift ? gift.id : gift.months}\n          message={localMessage}\n          threadId={MAIN_THREAD_ID}\n          appearanceOrder={0}\n        />\n      </div>\n      {renderOptionsSection()}\n      <div className={styles.spacer} />\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      stars,\n    } = global;\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n      fill,\n    } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, peerId);\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n    const userFullInfo = selectUserFullInfo(global, peerId);\n    const currentUserId = global.currentUserId;\n    const isGiftForSelf = currentUserId === peerId;\n    const areUniqueStarGiftsDisallowed = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowUniqueStarGifts;\n    const shouldDisallowLimitedStarGifts = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n    const tabState = selectTabState(global);\n\n    return {\n      starBalance: stars?.balance,\n      fill,\n      peer,\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      captionLimit: global.appConfig?.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n      paidMessagesStars,\n      areUniqueStarGiftsDisallowed,\n      shouldDisallowLimitedStarGifts,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"amount\":\"sbo2dMcH\",\"starsPriceBlock\":\"QB5SI7ta\",\"starsPriceIcon\":\"jgnEfoeM\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  optionByStars?: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, optionByStars, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {optionByStars && (\n        <div className={styles.starsPriceBlock}>\n          {lang('GiftPremiumStarsPrice', {\n            stars: (formatStarsAsIcon(lang, optionByStars.amount, { className: styles.starsPriceIcon })),\n          }, { withNodes: true, withMarkdown: true })}\n        </div>\n      )}\n      {Boolean(discount) && (\n        <GiftRibbon color=\"purple\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiStarGiftRegular,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGiftRegular;\n  observeIntersection?: ObserveFn;\n  onClick: (gift: ApiStarGiftRegular) => void;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({ gift, observeIntersection, onClick }: OwnProps) {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const [shouldPlay, play] = useFlag();\n\n  const {\n    stars,\n    isLimited,\n    isSoldOut,\n    sticker,\n  } = gift;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    onClick(gift);\n  });\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.container, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      <Button className={styles.buy} nonInteractive size=\"tiny\" color=\"stars\" withSparkleEffect pill fluid>\n        <Icon name=\"star\" className={styles.star} />\n        <div className={styles.amount}>\n          {stars}\n        </div>\n      </Button>\n      {isLimited && !isSoldOut && <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />}\n      {isSoldOut && <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />}\n    </div>\n  );\n}\n\nexport default memo(GiftItemStar);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  idsByCategory?: Record<StarGiftCategory, string[]>;\n  areLimitedStarGiftsDisallowed?: boolean;\n};\n\nconst StarGiftCategoryList = ({\n  idsByCategory,\n  onCategoryChanged,\n  areLimitedStarGiftsDisallowed,\n}: StateProps & OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const starCategories: number[] | undefined = useMemo(() => idsByCategory && Object.keys(idsByCategory)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [idsByCategory]);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') return lang('AllGiftsCategory');\n    if (category === 'stock') return lang('StockGiftsCategory');\n    if (category === 'limited') return lang('LimitedGiftsCategory');\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {Number.isInteger(category) && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {!areLimitedStarGiftsDisallowed && renderCategoryItem('limited')}\n      {renderCategoryItem('stock')}\n      {starCategories?.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGifts } = global;\n\n    return {\n      idsByCategory: starGifts?.idsByCategory,\n    };\n  },\n)(StarGiftCategoryList));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"commonHeaderText\":\"ybZo03if\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiDisallowedGifts,\n  ApiPeer,\n  ApiPremiumGiftCodeOption,\n  ApiStarGiftRegular,\n  ApiStarsAmount,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGiftRegular;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGiftRegular>;\n  starGiftIdsByCategory?: Record<StarGiftCategory, string[]>;\n  starBalance?: ApiStarsAmount;\n  peer?: ApiPeer;\n  isSelf?: boolean;\n  disallowedGifts?: ApiDisallowedGifts;\n};\n\nconst AVATAR_SIZE = 100;\nconst INTERSECTION_THROTTLE = 200;\nconst SCROLL_THROTTLE = 200;\n\nconst runThrottledForScroll = throttle((cb) => cb(), SCROLL_THROTTLE, true);\n\nconst GiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftIdsByCategory,\n  starBalance,\n  peer,\n  isSelf,\n  disallowedGifts,\n}) => {\n  const {\n    closeGiftModal,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const giftHeaderRef = useRef<HTMLHeadingElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const scrollerRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const user = peer && isApiPeerUser(peer) ? peer : undefined;\n  const chat = peer && isApiPeerChat(peer) ? peer : undefined;\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [shouldShowMainScreenHeader, setShouldShowMainScreenHeader] = useState(false);\n  const [isMainScreenHeaderForStarGifts, setIsMainScreenHeaderForStarGifts] = useState(false);\n  const [isGiftScreenHeaderForStarGifts, setIsGiftScreenHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    const {\n      shouldDisallowPremiumGifts,\n      ...disallowedGiftTypes\n    } = disallowedGifts;\n    return !isSelf && Object.values(disallowedGiftTypes).every(Boolean);\n  }, [isSelf, disallowedGifts]);\n\n  const areUnlimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowUnlimitedStarGifts;\n  const areLimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const allGifts = renderingModal?.gifts;\n  const filteredGifts = useMemo(() => {\n    return allGifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1 && gift.currency !== 'XTR');\n  }, [allGifts]);\n\n  const giftsByStars = useMemo(() => {\n    const mapGifts = new Map();\n\n    if (!filteredGifts) return mapGifts;\n\n    filteredGifts.forEach((gift) => {\n      const giftByStars = allGifts?.find(\n        (starsGift) => starsGift.currency === STARS_CURRENCY_CODE\n        && starsGift.months === gift.months,\n      );\n      if (giftByStars) {\n        mapGifts.set(gift, giftByStars);\n      }\n    });\n\n    return mapGifts;\n  }, [allGifts, filteredGifts]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const isGiftScreen = Boolean(selectedGift);\n  const shouldShowHeader = isGiftScreen || shouldShowMainScreenHeader;\n  const isHeaderForStarGifts = isGiftScreen ? isGiftScreenHeaderForStarGifts : isMainScreenHeaderForStarGifts;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShouldShowMainScreenHeader(false);\n      setSelectedGift(undefined);\n      setSelectedCategory('all');\n    }\n  }, [isOpen]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (isGiftScreen) return;\n    const currentTarget = e.currentTarget;\n\n    runThrottledForScroll(() => {\n      const { scrollTop } = currentTarget;\n\n      setShouldShowMainScreenHeader(scrollTop > 150);\n\n      if (transitionRef.current && giftHeaderRef.current) {\n        const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n        const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n        setIsMainScreenHeaderForStarGifts(headerTop - transitionTop <= 0);\n      }\n    });\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = chat\n    ? lang('StarGiftDescriptionChannel', { peer: getPeerTitle(lang, chat) }, {\n      withNodes: true,\n      withMarkdown: true,\n    })\n    : isSelf\n      ? lang('StarGiftDescriptionSelf', undefined, {\n        withNodes: true,\n        renderTextFilters: ['br'],\n      })\n      : lang('StarGiftDescription', {\n        user: getUserFullName(user)!,\n      }, { withNodes: true, withMarkdown: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang(isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption) => {\n    setSelectedGift(gift);\n    setIsGiftScreenHeaderForStarGifts('id' in gift);\n  });\n\n  function renderStarGifts() {\n    const filteredGiftIds = starGiftIdsByCategory?.[selectedCategory]?.filter((giftId) => {\n      const gift = starGiftsById?.[giftId];\n      if (!gift) return false;\n\n      const { isLimited, isSoldOut, upgradeStars } = gift;\n      if (areUnlimitedStarGiftsDisallowed && !areLimitedStarGiftsDisallowed) {\n        return isLimited;\n      }\n      if (areLimitedStarGiftsDisallowed && !areUnlimitedStarGiftsDisallowed) {\n        return !isLimited && !isSoldOut;\n      }\n      if (areUnlimitedStarGiftsDisallowed && areLimitedStarGiftsDisallowed) {\n        return Boolean(isLimited && !!upgradeStars);\n      }\n\n      return true;\n    });\n\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && filteredGiftIds?.map((giftId) => {\n          const gift = starGiftsById[giftId];\n          return (\n            <GiftItemStar\n              key={giftId}\n              gift={gift}\n              observeIntersection={observeIntersection}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              optionByStars={giftsByStars.get(gift)}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (isGiftScreen) {\n      setSelectedGift(undefined);\n      return;\n    }\n    closeGiftModal();\n  });\n\n  function renderMainScreen() {\n    return (\n      <div ref={scrollerRef} className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            size={AVATAR_SIZE}\n            peer={peer}\n          />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n        </div>\n        {!isSelf && !chat && !disallowedGifts?.shouldDisallowPremiumGifts && (\n          <>\n            {renderGiftPremiumHeader()}\n            {renderGiftPremiumDescription()}\n            {renderPremiumGifts()}\n          </>\n        )}\n\n        {!areAllGiftsDisallowed && (\n          <>\n            {renderStarGiftsHeader()}\n            {renderStarGiftsDescription()}\n            <StarGiftCategoryList\n              areLimitedStarGiftsDisallowed={areLimitedStarGiftsDisallowed}\n              onCategoryChanged={onCategoryChanged}\n            />\n            <Transition\n              name=\"zoomFade\"\n              activeKey={getCategoryKey(selectedCategory)}\n              className={styles.starGiftsTransition}\n            >\n              {renderStarGifts()}\n            </Transition>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  const isBackButton = isGiftScreen;\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={closeGiftModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n      isLowStackPriority\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} withAddButton />\n      <div className={buildClassName(styles.header, !shouldShowHeader && styles.hiddenHeader)}>\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={Number(isHeaderForStarGifts)}\n          slideClassName={styles.headerSlide}\n        >\n          <h2 className={styles.commonHeaderText}>\n            {lang(isHeaderForStarGifts ? (isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader') : 'GiftPremiumHeader')}\n          </h2>\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={isGiftScreen ? 1 : 0}\n      >\n        {!isGiftScreen && renderMainScreen()}\n        {isGiftScreen && renderingModal?.forPeerId && (\n          <GiftSendingOptions\n            gift={selectedGift}\n            giftByStars={giftsByStars.get(selectedGift)}\n            peerId={renderingModal.forPeerId}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const {\n    starGifts,\n    stars,\n    currentUserId,\n  } = global;\n\n  const peer = modal?.forPeerId ? selectPeer(global, modal.forPeerId) : undefined;\n  const isSelf = Boolean(currentUserId && modal?.forPeerId === currentUserId);\n  const userFullInfo = peer ? selectUserFullInfo(global, peer?.id) : undefined;\n\n  return {\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    starGiftsById: starGifts?.byId,\n    starGiftIdsByCategory: starGifts?.idsByCategory,\n    starBalance: stars?.balance,\n    peer,\n    isSelf,\n    disallowedGifts: userFullInfo?.disallowedGifts,\n  };\n})(GiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') return -2;\n  if (category === 'limited') return -1;\n  if (category === 'stock') return 0;\n  return category;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import React, {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCanGift } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker = ({\n  modal,\n  currentUserId,\n  userIds,\n}: OwnProps & StateProps) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const global = getGlobal();\n    const idsWithSelf = userIds ? userIds.concat(currentUserId!) : undefined;\n    const filteredPeerIds = idsWithSelf ? filterPeersByQuery({ ids: idsWithSelf, query: searchQuery }) : [];\n\n    return sortChatIds(unique(filteredPeerIds).filter((peerId) => {\n      return selectCanGift(global, peerId);\n    }), undefined, [currentUserId!]);\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        forceShowSelf\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n  };\n})(GiftRecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"nnublcCk\",\"header\":\"p7FTs7_p\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"footer\":\"bho0GTYt\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\",\"uniqueAttribute\":\"OJQnkf17\",\"uniqueGift\":\"I6o_pGAm\",\"starAmountIcon\":\"_5guecUe\",\"modalHeader\":\"ie9tImaj\",\"modalCloseButton\":\"p38RBGdC\",\"ownerAddress\":\"DavMRg4Q\",\"copyIcon\":\"SLX5tX8C\"};","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiEmojiStatusType,\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getHasAdminRight } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat } from '../../../../global/helpers/peers';\nimport { selectPeer, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport GiftMenuItems from '../../../common/gift/GiftMenuItems';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport DropdownMenu from '../../../ui/DropdownMenu';\nimport Link from '../../../ui/Link';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  targetPeer?: ApiPeer;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n  tonExplorerUrl?: string;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal,\n  fromPeer,\n  targetPeer,\n  currentUserId,\n  starGiftMaxConvertPeriod,\n  hasAdminRights,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n  tonExplorerUrl,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisibility,\n    convertGiftToStars,\n    openChatWithInfo,\n    focusMessage,\n    openGiftUpgradeModal,\n    showNotification,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingFromPeer = useCurrentOrPrev(fromPeer);\n  const renderingTargetPeer = useCurrentOrPrev(targetPeer);\n\n  const isTargetChat = renderingTargetPeer && isApiPeerChat(renderingTargetPeer);\n\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const isSender = savedGift?.fromId === currentUserId;\n  const canConvertDifference = (savedGift && starGiftMaxConvertPeriod && (\n    savedGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n  const giftSticker = gift && getStickerFromGift(gift);\n  const hasConvertOption = canConvertDifference > 0 && Boolean(savedGift?.starsToConvert);\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n\n  const canFocusUpgrade = Boolean(savedGift?.upgradeMsgId);\n  const canManage = !canFocusUpgrade && savedGift?.inputGift && (\n    isTargetChat ? hasAdminRights : renderingTargetPeer?.id === currentUserId\n  );\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleFocusUpgraded = useLastCallback(() => {\n    const giftChat = isSender ? renderingTargetPeer : renderingFromPeer;\n    if (!savedGift?.upgradeMsgId || !giftChat) return;\n    const { upgradeMsgId } = savedGift;\n    focusMessage({ chatId: giftChat.id, messageId: upgradeMsgId! });\n    handleClose();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { inputGift } = savedGift!;\n    convertGiftToStars({ gift: inputGift! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenUpgradeModal = useLastCallback(() => {\n    if (!savedGift) return;\n    openGiftUpgradeModal({ giftId: savedGift.gift.id, gift: savedGift });\n  });\n\n  const giftAttributes = useMemo(() => {\n    return gift && getGiftAttributes(gift);\n  }, [gift]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isMenuOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isMenuOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AriaMoreButton')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [lang]);\n\n  const renderFooterButton = useLastCallback(() => {\n    if (canFocusUpgrade) {\n      return (\n        <Button size=\"smaller\" onClick={handleFocusUpgraded}>\n          {lang('GiftInfoViewUpgraded')}\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift?.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n      return (\n        <Button size=\"smaller\" isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgradeForFree')}\n        </Button>\n      );\n    }\n\n    return (\n      <Button size=\"smaller\" onClick={handleClose}>\n        {lang('OK')}\n      </Button>\n    );\n  });\n\n  const saleDateInfo = useMemo(() => {\n    if (!gift) return undefined;\n    let text = '';\n    if (gift.type === 'starGift') {\n      if (gift.firstSaleDate) {\n        text += `${lang('GiftInfoFirstSale')} ${formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true)}`;\n      }\n      if (gift.lastSaleDate) {\n        text += '\\n';\n        text += `${lang('GiftInfoLastSale')} ${formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true)}`;\n      }\n    }\n\n    return text;\n  }, [gift, lang]);\n\n  const modalData = useMemo(() => {\n    if (!typeGift || !gift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, starsToConvert, isUnsaved, isConverted, upgradeMsgId,\n    } = savedGift || {};\n    const canConvert = hasConvertOption && Boolean(starsToConvert);\n\n    const isVisibleForMe = isNameHidden && renderingTargetPeer;\n\n    const description = (() => {\n      if (!savedGift) return lang('GiftInfoSoldOutDescription');\n      if (isTargetChat) return undefined;\n\n      if (savedGift.upgradeMsgId) return lang('GiftInfoDescriptionUpgraded');\n      if (savedGift.canUpgrade && savedGift.alreadyPaidUpgradeStars) {\n        return canManage\n          ? lang('GiftInfoDescriptionFreeUpgrade')\n          : lang('GiftInfoPeerDescriptionFreeUpgradeOut', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n      }\n      if (!canManage && !isSender) return undefined;\n      if (isConverted && canConvert) {\n        return canManage\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoPeerDescriptionOutConverted', {\n            amount: starsToConvert,\n            peer: getPeerTitle(lang, renderingTargetPeer!)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      if (savedGift.canUpgrade && canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescriptionUpgrade', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n        }\n\n        return lang('GiftInfoDescriptionUpgradeRegular');\n      }\n\n      if (canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescription', {\n            amount: starsToConvert,\n          }, {\n            withNodes: true,\n            withMarkdown: true,\n            pluralValue: starsToConvert,\n          });\n        }\n\n        return lang('GiftInfoDescriptionRegular');\n      }\n\n      if (canConvert) {\n        return lang('GiftInfoPeerDescriptionOut', {\n          amount: starsToConvert,\n          peer: getPeerTitle(lang, renderingTargetPeer!)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        });\n      }\n\n      return lang('GiftInfoPeerDescriptionOutRegular', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n    })();\n\n    function getTitle() {\n      if (isGiftUnique) return gift.title;\n      if (!savedGift) return lang('GiftInfoSoldOutTitle');\n\n      return canManage ? lang('GiftInfoReceived') : lang('GiftInfoTitle');\n    }\n\n    const uniqueGiftContextMenu = (\n      <DropdownMenu\n        className=\"with-menu-transitions\"\n        trigger={SettingsMenuButton}\n        positionX=\"right\"\n      >\n        <GiftMenuItems\n          peerId={renderingModal!.peerId!}\n          gift={typeGift}\n          canManage={canManage}\n          collectibleEmojiStatuses={collectibleEmojiStatuses}\n          currentUserEmojiStatus={currentUserEmojiStatus}\n        />\n      </DropdownMenu>\n    );\n\n    const uniqueGiftModalHeader = (\n      <div\n        className={styles.modalHeader}\n      >\n        <Button\n          className={styles.modalCloseButton}\n          round\n          color=\"translucent-white\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {isOpen && uniqueGiftContextMenu}\n      </div>\n    );\n\n    const uniqueGiftHeader = isGiftUnique && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={STICKER_SIZE}\n        />\n        <h1 className={styles.title}>\n          {getTitle()}\n        </h1>\n        {description && (\n          <p className={buildClassName(styles.description, !savedGift && gift?.type === 'starGift' && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (gift.type === 'starGift') {\n      const hasFrom = fromId || isNameHidden;\n\n      if (hasFrom) {\n        tableData.push([\n          lang('GiftInfoFrom'),\n          !fromId ? (\n            <>\n              <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n              <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n            </>\n          ) : { chatId: fromId },\n        ]);\n      }\n\n      if (savedGift?.date) {\n        tableData.push([\n          lang('GiftInfoDate'),\n          <span title={saleDateInfo}>{formatDateTimeToString(savedGift.date * 1000, lang.code, true)}</span>,\n        ]);\n      }\n\n      if (gift.firstSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoFirstSale'),\n          formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.lastSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoLastSale'),\n          formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      const starsValue = gift.stars + (savedGift?.alreadyPaidUpgradeStars || 0);\n\n      tableData.push([\n        lang('GiftInfoValue'),\n        <div className={styles.giftValue}>\n          {formatStarsAsIcon(lang, starsValue, { className: styles.starAmountIcon })}\n          {canManage && hasConvertOption && Boolean(starsToConvert) && (\n            <BadgeButton onClick={openConvertConfirm}>\n              {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n            </BadgeButton>\n          )}\n        </div>,\n      ]);\n\n      if (gift.availabilityTotal) {\n        tableData.push([\n          lang('GiftInfoAvailability'),\n          lang('GiftInfoAvailabilityValue', {\n            count: gift.availabilityRemains || 0,\n            total: gift.availabilityTotal,\n          }, {\n            pluralValue: gift.availabilityRemains || 0,\n          }),\n        ]);\n      }\n\n      if (gift.upgradeStars && !upgradeMsgId) {\n        tableData.push([\n          lang('GiftInfoStatus'),\n          <div className={styles.giftValue}>\n            {lang('GiftInfoStatusNonUnique')}\n            {canManage && <BadgeButton onClick={handleOpenUpgradeModal}>{lang('GiftInfoUpgradeBadge')}</BadgeButton>}\n          </div>,\n        ]);\n      }\n\n      if (savedGift?.message) {\n        tableData.push([\n          undefined,\n          renderTextWithEntities(savedGift.message),\n        ]);\n      }\n    }\n\n    if (isGiftUnique) {\n      const { ownerName, ownerAddress, ownerId } = gift;\n      const {\n        model, backdrop, pattern, originalDetails,\n      } = giftAttributes || {};\n\n      if (ownerAddress) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          <span\n            className={styles.ownerAddress}\n            onClick={() => {\n              copyTextToClipboard(ownerAddress);\n              showNotification({\n                message: { key: 'WalletAddressCopied' },\n                icon: 'copy',\n              });\n            }}\n          >\n            {ownerAddress}\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </span>,\n        ]);\n      } else {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          ownerId ? { chatId: ownerId, withEmojiStatus: true } : ownerName || '',\n        ]);\n      }\n\n      if (model) {\n        tableData.push([\n          lang('GiftAttributeModel'),\n          <span className={styles.uniqueAttribute}>\n            {model.name}<BadgeButton>{formatPercent(model.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (backdrop) {\n        tableData.push([\n          lang('GiftAttributeBackdrop'),\n          <span className={styles.uniqueAttribute}>\n            {backdrop.name}<BadgeButton>{formatPercent(backdrop.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (pattern) {\n        tableData.push([\n          lang('GiftAttributeSymbol'),\n          <span className={styles.uniqueAttribute}>\n            {pattern.name}<BadgeButton>{formatPercent(pattern.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoIssued', {\n          issued: gift.issuedCount,\n          total: gift.totalCount,\n        }),\n      ]);\n\n      if (originalDetails) {\n        const {\n          date, recipientId, message, senderId,\n        } = originalDetails;\n        const global = getGlobal(); // Peer titles do not need to be reactive\n\n        const openChat = (id: string) => {\n          openChatWithInfo({ id });\n          closeGiftInfoModal();\n        };\n\n        const recipient = selectPeer(global, recipientId)!;\n        const sender = senderId ? selectPeer(global, senderId) : undefined;\n\n        const formattedDate = formatDateTimeToString(date * 1000, lang.code, true);\n        const recipientLink = (\n          // eslint-disable-next-line react/jsx-no-bind\n          <Link onClick={() => openChat(recipientId)} isPrimary>\n            {getPeerTitle(lang, recipient)}\n          </Link>\n        );\n\n        let text: TeactNode | undefined;\n        if (!sender || senderId === recipientId) {\n          text = message ? lang('GiftInfoPeerOriginalInfoText', {\n            peer: recipientLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfo', {\n            peer: recipientLink,\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          });\n        } else {\n          const senderLink = (\n            // eslint-disable-next-line react/jsx-no-bind\n            <Link onClick={() => openChat(sender.id)} isPrimary>\n              {getPeerTitle(lang, sender)}\n            </Link>\n          );\n          text = message ? lang('GiftInfoPeerOriginalInfoTextSender', {\n            peer: recipientLink,\n            sender: senderLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfoSender', {\n            peer: recipientLink,\n            date: formattedDate,\n            sender: senderLink,\n          }, {\n            withNodes: true,\n          });\n        }\n\n        tableData.push([\n          undefined,\n          <span>{text}</span>,\n        ]);\n      }\n    }\n\n    const tonLink = tonExplorerUrl && isGiftUnique && gift.giftAddress && (\n      `${tonExplorerUrl}${gift.giftAddress}`\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {(canManage || tonLink) && (\n          <div className={styles.footerDescription}>\n            {tonLink && (\n              <div>\n                {lang('GiftInfoTonText', {\n                  link: <SafeLink url={tonLink} shouldSkipModal text={lang('GiftInfoTonLinkText')} />,\n                }, { withNodes: true })}\n              </div>\n            )}\n            {canManage && (\n              <div>\n                {lang(`GiftInfo${isTargetChat ? 'Channel' : ''}${isUnsaved ? 'Hidden' : 'Saved'}`, {\n                  link: (\n                    <Link isPrimary onClick={handleTriggerVisibility}>\n                      {lang(`GiftInfoSaved${isUnsaved ? 'Show' : 'Hide'}`)}\n                    </Link>\n                  ),\n                }, {\n                  withNodes: true,\n                })}\n              </div>\n            )}\n            {isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n          </div>\n        )}\n        {renderFooterButton()}\n      </div>\n    );\n\n    return {\n      modalHeader: isGiftUnique ? uniqueGiftModalHeader : undefined,\n      header: isGiftUnique ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [\n    typeGift, savedGift, renderingTargetPeer, giftSticker, lang,\n    canManage, hasConvertOption, isSender, oldLang, tonExplorerUrl,\n    gift, giftAttributes, renderFooterButton, isTargetChat,\n    SettingsMenuButton, isOpen, isGiftUnique, renderingModal,\n    collectibleEmojiStatuses, currentUserEmojiStatus, saleDateInfo,\n  ]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        modalHeader={modalData?.modalHeader}\n        header={modalData?.header}\n        hasBackdrop={isGiftUnique}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        className={styles.modal}\n        onClose={handleClose}\n      />\n      {savedGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoPeerConvertDescription', {\n              amount: formatStarsAsText(lang, savedGift.starsToConvert!),\n              peer: getPeerTitle(lang, renderingFromPeer!)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {hasConvertOption && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isSavedGift = typeGift && 'gift' in typeGift;\n    const currentUserId = global.currentUserId;\n\n    const fromId = isSavedGift && typeGift.fromId;\n    const fromPeer = fromId ? selectPeer(global, fromId) : undefined;\n    const targetPeer = modal?.peerId ? selectPeer(global, modal.peerId) : undefined;\n    const chat = targetPeer && isApiPeerChat(targetPeer) ? targetPeer : undefined;\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n    const currentUser = selectUser(global, currentUserId!);\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      targetPeer,\n      currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n      tonExplorerUrl: global.appConfig?.tonExplorerUrl,\n      hasAdminRights,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"EWaVCxY4\",\"footerButton\":\"_Dt6RSQV\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  ApiStarGiftRegular,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport { getStickerMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { fetch } from '../../../../util/mediaLoader';\n\nimport useInterval from '../../../../hooks/schedulers/useInterval';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftUpgradeModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftUpgradeModal'];\n};\n\ntype StateProps = {\n  recipient?: ApiPeer;\n};\n\ntype Attributes = {\n  model: ApiStarGiftAttributeModel;\n  pattern: ApiStarGiftAttributePattern;\n  backdrop: ApiStarGiftAttributeBackdrop;\n};\n\nconst PREVIEW_UPDATE_INTERVAL = 3000;\n\nconst GiftUpgradeModal = ({ modal, recipient }: OwnProps & StateProps) => {\n  const { closeGiftUpgradeModal, upgradeGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingRecipient = useCurrentOrPrev(recipient);\n  const [shouldKeepOriginalDetails, setShouldKeepOriginalDetails] = useState(false);\n\n  const [previewAttributes, setPreviewAttributes] = useState<Attributes | undefined>();\n\n  const lang = useLang();\n\n  const handleClose = useLastCallback(() => closeGiftUpgradeModal());\n\n  const handleUpgrade = useLastCallback(() => {\n    const gift = renderingModal?.gift;\n    if (!gift?.inputGift) return;\n\n    upgradeGift({\n      gift: gift.inputGift,\n      shouldKeepOriginalDetails,\n      upgradeStars: !gift.alreadyPaidUpgradeStars ? (gift.gift as ApiStarGiftRegular).upgradeStars : undefined,\n    });\n    handleClose();\n  });\n\n  const updatePreviewAttributes = useLastCallback(() => {\n    if (!renderingModal?.sampleAttributes) return;\n    setPreviewAttributes(getRandomAttributes(renderingModal.sampleAttributes, previewAttributes));\n  });\n\n  useInterval(updatePreviewAttributes, isOpen ? PREVIEW_UPDATE_INTERVAL : undefined, true);\n\n  useEffect(() => {\n    if (isOpen && renderingModal?.sampleAttributes) {\n      updatePreviewAttributes();\n    }\n  }, [isOpen, renderingModal?.sampleAttributes]);\n\n  // Preload stickers and patterns\n  useEffect(() => {\n    const attributes = renderingModal?.sampleAttributes;\n    if (!attributes) return;\n    const patternStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'pattern')\n      .map((attr) => attr.sticker);\n    const modelStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')\n      .map((attr) => attr.sticker);\n\n    const mediaHashes = [...patternStickers, ...modelStickers].map((sticker) => getStickerMediaHash(sticker, 'full'));\n    mediaHashes.forEach((hash) => {\n      fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n  }, [renderingModal?.sampleAttributes]);\n\n  const modalData = useMemo(() => {\n    if (!previewAttributes || !isOpen) {\n      return undefined;\n    }\n\n    const gift = renderingModal?.gift;\n\n    const listItemData = [\n      ['diamond', lang('GiftUpgradeUniqueTitle'), lang('GiftUpgradeUniqueDescription')],\n      ['trade', lang('GiftUpgradeTransferableTitle'), lang('GiftUpgradeTransferableDescription')],\n      ['auction', lang('GiftUpgradeTradeableTitle'), lang('GiftUpgradeTradeableDescription')],\n    ] satisfies TableAboutData;\n\n    const subtitle = renderingRecipient\n      ? lang('GiftPeerUpgradeText', { peer: getPeerTitle(lang, renderingRecipient) })\n      : lang('GiftUpgradeTextOwn');\n\n    const header = (\n      <UniqueGiftHeader\n        modelAttribute={previewAttributes.model}\n        backdropAttribute={previewAttributes.backdrop}\n        patternAttribute={previewAttributes.pattern}\n        title={lang('GiftUpgradeTitle')}\n        subtitle={subtitle}\n      />\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {!gift && (\n          <Button className={styles.footerButton} size=\"smaller\" onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {gift && (\n          <>\n            <Checkbox\n              label={lang('GiftUpgradeKeepDetails')}\n              onCheck={setShouldKeepOriginalDetails}\n              checked={shouldKeepOriginalDetails}\n            />\n            <Button className={styles.footerButton} size=\"smaller\" isShiny onClick={handleUpgrade}>\n              {gift.alreadyPaidUpgradeStars\n                ? lang('GeneralConfirm')\n                : lang('GiftUpgradeButton', {\n                  amount: formatStarsAsIcon(lang, (gift.gift as ApiStarGiftRegular).upgradeStars!, { asFont: true }),\n                }, { withNodes: true })}\n            </Button>\n          </>\n        )}\n      </div>\n    );\n\n    return {\n      listItemData,\n      header,\n      footer,\n    };\n  }, [previewAttributes, isOpen, lang, renderingRecipient, renderingModal?.gift, shouldKeepOriginalDetails]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={modalData?.header}\n      footer={modalData?.footer}\n      listItemData={modalData?.listItemData}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const recipientId = modal?.recipientId;\n    const recipient = recipientId ? selectPeer(global, recipientId) : undefined;\n\n    return {\n      recipient,\n    };\n  },\n)(GiftUpgradeModal));\n\nfunction getRandomAttributes(list: ApiStarGiftAttribute[], previousSelection?: Attributes): Attributes {\n  const models = list.filter((attr): attr is ApiStarGiftAttributeModel => (\n    attr.type === 'model' && attr.name !== previousSelection?.model.name\n  ));\n  const patterns = list.filter((attr): attr is ApiStarGiftAttributePattern => (\n    attr.type === 'pattern' && attr.name !== previousSelection?.pattern.name\n  ));\n  const backdrops = list.filter((attr): attr is ApiStarGiftAttributeBackdrop => (\n    attr.type === 'backdrop' && attr.name !== previousSelection?.backdrop.name\n  ));\n\n  const randomModel = models[Math.floor(Math.random() * models.length)];\n  const randomPattern = patterns[Math.floor(Math.random() * patterns.length)];\n  const randomBackdrop = backdrops[Math.floor(Math.random() * backdrops.length)];\n\n  return {\n    model: randomModel,\n    pattern: randomPattern,\n    backdrop: randomBackdrop,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"qL0cHbwS\",\"profileBlock\":\"t18QCmAb\",\"titleContainer\":\"q8w7tnmR\",\"radialPattern\":\"_1RfhkfB\",\"lockIcon\":\"jiPObOWv\",\"avatar\":\"JK2zOWA7\",\"userTitle\":\"lxxbgNCl\",\"status\":\"MLMdxkUg\",\"giftTitle\":\"wxg_5ou_\",\"infoDescription\":\"KSCLIMZm\",\"footer\":\"VDrvalBo\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { selectIsCurrentUserPremium, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useCustomEmoji from '../../../common/hooks/useCustomEmoji';\n\nimport Avatar from '../../../common/Avatar';\nimport FullNameTitle from '../../../common/FullNameTitle';\nimport Icon from '../../../common/icons/Icon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\n\nimport styles from './GiftStatusInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftStatusInfoModal'];\n};\n\ntype StateProps = {\n  currentUser: ApiUser;\n  isCurrentUserPremium?: boolean;\n};\n\nconst GiftStatusInfoModal = ({\n  modal,\n  currentUser,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftStatusInfoModal,\n    setEmojiStatus,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const { emojiStatus } = renderingModal || {};\n\n  const subtitleColor = emojiStatus?.textColor;\n\n  const patternIcon = useCustomEmoji(emojiStatus?.patternDocumentId);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftStatusInfoModal();\n  });\n\n  const onWearClick = useLastCallback(() => {\n    if (emojiStatus) {\n      setEmojiStatus({ emojiStatus });\n    }\n    closeGiftStatusInfoModal();\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!emojiStatus || !isOpen) return undefined;\n\n    const backdropColors = [emojiStatus.centerColor, emojiStatus.edgeColor];\n    const patternColor = emojiStatus.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternIcon.customEmoji}\n      />\n    );\n  }, [emojiStatus, isOpen, patternIcon]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    return {\n      ...currentUser,\n      emojiStatus,\n    } satisfies ApiUser;\n  }, [currentUser, emojiStatus]);\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <div\n          className={buildClassName(styles.profileBlock)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n        >\n\n          {radialPatternBackdrop}\n          <Avatar peer={mockPeerWithStatus} size=\"jumbo\" className={styles.avatar} />\n          <FullNameTitle\n            peer={mockPeerWithStatus}\n            className={styles.userTitle}\n            withEmojiStatus\n            noFake\n            noVerified\n            statusSparklesColor={subtitleColor}\n          />\n          <p className={styles.status} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n            {lang('Online')}\n          </p>\n        </div>\n        <div className={styles.titleContainer}>\n          <div className={styles.giftTitle}>{\n            lang('UniqueStatusWearTitle', {\n              gift: mockPeerWithStatus?.emojiStatus?.title,\n            })\n          }\n          </div>\n          <div className={styles.infoDescription}>{\n            lang('UniqueStatusBenefitsDescription')\n          }\n          </div>\n        </div>\n      </div>\n    );\n  }, [subtitleColor, radialPatternBackdrop, mockPeerWithStatus, lang]);\n\n  const listItemData = [\n    ['radial-badge', lang('UniqueStatusBadgeBenefitTitle'), lang('UniqueStatusBadgeDescription')],\n    ['unique-profile', lang('UniqueStatusProfileDesignBenefitTitle'), lang('UniqueStatusProfileDesignDescription')],\n    ['proof-of-ownership', lang('UniqueStatusProofOfOwnershipBenefitTitle'),\n      lang('UniqueStatusProofOfOwnershipDescription')],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={onWearClick}\n        >\n          {lang('UniqueStatusWearButton')}\n          {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.lockIcon} />}\n        </Button>\n      </div>\n    );\n  }, [lang, isCurrentUserPremium, isOpen]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      currentUser,\n      isCurrentUserPremium,\n    };\n  },\n)(GiftStatusInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"LQgz8Nlx\",\"giftPreview\":\"hgs0ts_O\",\"backdrop\":\"OnBhMaBw\",\"description\":\"HBxB4QPY\",\"arrow\":\"kXTOUpfb\",\"noPassword\":\"BnqLhoKr\"};","import React, {\n  memo,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { getDays } from '../../../../util/dates/units';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PasswordForm from '../../../common/PasswordForm';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftWithdrawModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftWithdrawModal'];\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  passwordHint?: string;\n};\n\nconst FRAGMENT_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'fragment',\n  title: '',\n  customPeerAvatarColor: '#000000',\n};\nconst GIFT_STICKER_SIZE = 4.5 * REM;\n\nconst GiftWithdrawModal = ({ modal, hasPassword, passwordHint }: OwnProps & StateProps) => {\n  const { closeGiftWithdrawModal, clearGiftWithdrawError, processStarGiftWithdrawal } = getActions();\n  const isOpen = Boolean(modal);\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const gift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = gift && getGiftAttributes(gift);\n  const exportDelay = renderingModal?.gift?.canExportAt\n    ? Math.max(renderingModal.gift.canExportAt - getServerTime(), 0) : undefined;\n\n  const handleClose = useLastCallback(() => {\n    closeGiftWithdrawModal();\n  });\n\n  const handleSubmit = useLastCallback((password: string) => {\n    processStarGiftWithdrawal({\n      gift: renderingModal!.gift.inputGift!,\n      password,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('GiftWithdrawTitle')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {giftAttributes && (\n        <>\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={FRAGMENT_PEER}\n              size=\"giant\"\n              className={styles.avatar}\n            />\n          </div>\n          <p className={styles.description}>\n            {lang('GiftWithdrawDescription', {\n              gift: `${gift.title} #${gift.number}`,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n              renderTextFilters: ['br'],\n            })}\n          </p>\n        </>\n      )}\n      {Boolean(exportDelay) && (\n        <p className={styles.exportHint}>\n          {lang('GiftWithdrawWait', { days: getDays(exportDelay) }, { pluralValue: getDays(exportDelay) })}\n        </p>\n      )}\n      {!hasPassword && <span className={styles.noPassword}>{lang('ErrorPasswordMissing')}</span>}\n      {hasPassword && !exportDelay && (\n        <PasswordForm\n          shouldShowSubmit\n          placeholder={lang('CheckPasswordPlaceholder')}\n          error={renderingModal?.errorKey && lang.withRegular(renderingModal?.errorKey)}\n          description={lang('CheckPasswordDescription')}\n          clearError={clearGiftWithdrawError}\n          isLoading={renderingModal?.isLoading}\n          hint={passwordHint}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isOpen}\n          onChangePasswordVisibility={setShouldShowPassword}\n          submitLabel={lang('GiftWithdrawSubmit')}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      passwordHint,\n    };\n  },\n)(GiftWithdrawModal));\n","import {\n  getIsHeavyAnimating, useCallback, useRef, useState,\n} from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport useHeavyAnimation from './useHeavyAnimation';\nimport useRunDebounced from './useRunDebounced';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useSyncEffect(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimation(noop, handleUnfreeze);\n\n  return {\n    isFrozen: getIsHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useState } from '../lib/teact/teact';\n\nimport type { ApiChat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\nimport useAsync from './useAsync';\nimport useDebouncedMemo from './useDebouncedMemo';\nimport useLastCallback from './useLastCallback';\n\nconst DEBOUNCE_TIMEOUT = 300;\n\nexport async function peerGlobalSearch(query: string) {\n  const searchResult = await callApi('searchChats', { query });\n  if (!searchResult) return undefined;\n\n  const ids = [...searchResult.accountResultIds, ...searchResult.globalResultIds];\n\n  return ids;\n}\n\nexport function prepareChatMemberSearch(chat: ApiChat) {\n  return async (query: string) => {\n    const searchResult = await callApi('fetchMembers', {\n      chat,\n      memberFilter: 'search',\n      query,\n    });\n\n    return searchResult?.members?.map((member) => member.userId) || [];\n  };\n}\n\nexport default function usePeerSearch({\n  query,\n  queryFn = peerGlobalSearch,\n  defaultValue,\n  debounceTimeout = DEBOUNCE_TIMEOUT,\n  isDisabled,\n}: {\n  query: string;\n  queryFn?: (query: string) => Promise<string[] | undefined>;\n  defaultValue?: string[];\n  debounceTimeout?: number;\n  isDisabled?: boolean;\n}) {\n  const debouncedQuery = useDebouncedMemo(() => query, debounceTimeout, [query]);\n  const [currentResultsQuery, setCurrentResultsQuery] = useState<string>('');\n  const searchQuery = !query ? query : debouncedQuery; // Ignore debounce if query is empty\n  const queryCallback = useLastCallback(queryFn);\n\n  const result = useAsync(async () => {\n    if (!searchQuery || isDisabled) {\n      setCurrentResultsQuery('');\n      return Promise.resolve(defaultValue);\n    }\n\n    const answer = await queryCallback(searchQuery);\n    setCurrentResultsQuery(searchQuery);\n    return answer;\n  }, [searchQuery, defaultValue, queryCallback, isDisabled], defaultValue);\n\n  return {\n    ...result,\n    currentResultsQuery,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"PvaNNycU\",\"giftPreview\":\"nCQxWKdu\",\"backdrop\":\"JCP9JNuS\",\"arrow\":\"p_1cyCau\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { UniqueCustomPeer } from '../../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../../config';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectCanGift, selectPeer } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePeerSearch from '../../../../hooks/usePeerSearch';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nimport styles from './GiftTransferModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftTransferModal'];\n};\n\ntype StateProps = {\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\ntype Categories = 'withdraw';\n\nconst AVATAR_SIZE = 4 * REM;\nconst GIFT_STICKER_SIZE = 3 * REM;\n\nconst GiftTransferModal = ({\n  modal, contactIds, currentUserId,\n}: OwnProps & StateProps) => {\n  const { closeGiftTransferModal, openGiftWithdrawModal, transferGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const uniqueGift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = uniqueGift && getGiftAttributes(uniqueGift);\n\n  const [selectedId, setSelectedId] = useState<string | undefined>();\n\n  const renderingSelectedPeerId = useCurrentOrPrev(selectedId);\n  const renderingSelectedPeer = useMemo(() => {\n    const global = getGlobal();\n    return renderingSelectedPeerId ? selectPeer(global, renderingSelectedPeerId) : undefined;\n  }, [renderingSelectedPeerId]);\n\n  const orderedChatIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n\n  const sortedLocalIds = useMemo(() => {\n    return unique([\n      ...(contactIds || []),\n      ...(orderedChatIds || []),\n    ]);\n  }, [contactIds, orderedChatIds]);\n\n  const { result: foundIds, currentResultsQuery } = usePeerSearch({\n    query: searchQuery,\n    defaultValue: sortedLocalIds,\n  });\n\n  const isLoading = currentResultsQuery !== searchQuery;\n\n  const categories = useMemo(() => {\n    if (currentResultsQuery) return MEMO_EMPTY_ARRAY;\n\n    return [{\n      type: 'withdraw',\n      isCustomPeer: true,\n      avatarIcon: 'toncoin',\n      peerColorId: 5,\n      title: lang('GiftTransferTON'),\n    }] satisfies UniqueCustomPeer<Categories>[];\n  }, [lang, currentResultsQuery]);\n\n  const handleCategoryChange = useLastCallback((category: Categories) => {\n    if (category !== 'withdraw') return;\n\n    openGiftWithdrawModal({\n      gift: renderingModal!.gift,\n    });\n    closeGiftTransferModal();\n  });\n\n  const displayIds = useMemo(() => {\n    if (isLoading) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n\n    return sortChatIds((foundIds || []).filter((peerId) => (\n      peerId !== currentUserId && selectCanGift(global, peerId)\n    )),\n    false);\n  }, [isLoading, foundIds, currentUserId]);\n\n  const closeConfirmModal = useLastCallback(() => {\n    setSelectedId(undefined);\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setSelectedId(undefined);\n    }\n  }, [isOpen]);\n\n  const handleTransfer = useLastCallback(() => {\n    if (!renderingModal?.gift.inputGift) return;\n    transferGift({\n      gift: renderingModal.gift.inputGift,\n      recipientId: renderingSelectedPeerId!,\n      transferStars: renderingModal.gift.transferStars,\n    });\n\n    closeConfirmModal();\n    closeGiftTransferModal();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={closeGiftTransferModal}\n      title={lang('GiftTransferTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      ignoreFreeze\n    >\n      <PeerPicker<Categories>\n        itemIds={displayIds}\n        categories={categories}\n        onSelectedCategoryChange={handleCategoryChange}\n        withDefaultPadding\n        withPeerUsernames\n        isSearchable\n        noScrollRestore\n        isLoading={isLoading}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onFilterChange={setSearchQuery}\n        onSelectedIdChange={setSelectedId}\n      />\n      {giftAttributes && (\n        <ConfirmDialog\n          isOpen={Boolean(selectedId)}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={renderingModal?.gift.transferStars\n            ? lang(\n              'GiftTransferConfirmButton',\n              { amount: formatStarsAsIcon(lang, renderingModal.gift.transferStars, { asFont: true }) },\n              { withNodes: true },\n            ) : lang('GiftTransferConfirmButtonFree')}\n          confirmHandler={handleTransfer}\n        >\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={renderingSelectedPeer}\n              size={AVATAR_SIZE}\n              className={styles.avatar}\n            />\n          </div>\n          <p>\n            {renderingModal?.gift.transferStars\n              ? lang('GiftTransferConfirmDescription', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                amount: formatStarsAsText(lang, renderingModal.gift.transferStars),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : lang('GiftTransferConfirmDescriptionFree', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })}\n          </p>\n        </ConfirmDialog>\n      )}\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { contactList, currentUserId } = global;\n\n    return {\n      contactIds: contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(GiftTransferModal));\n","import React, { memo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectUser } from '../../../../global/selectors';\nimport { formatStarsAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['chatRefundModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst ChatRefundModal = ({ modal, user }: OwnProps & StateProps) => {\n  const { closeChatRefundModal, addNoPaidMessagesException } = getActions();\n\n  const [shouldRefundStars, setShouldRefundStars] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingUser = useCurrentOrPrev(user);\n\n  const { starsToRefund, userId } = renderingModal || {};\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleConfirmRemoveFee = useLastCallback(() => {\n    closeChatRefundModal();\n    if (!userId) return;\n    addNoPaidMessagesException({ userId, shouldRefundCharged: shouldRefundStars });\n  });\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeChatRefundModal}\n      title={lang('RemoveFeeTitle')}\n      confirmLabel={lang('ConfirmRemoveMessageFee')}\n      confirmHandler={handleConfirmRemoveFee}\n    >\n      {lang('ConfirmDialogMessageRemoveFee', {\n        peer: renderingUser && getPeerTitle(lang, renderingUser),\n      }, {\n        withMarkdown: true,\n        withNodes: true,\n      })}\n      {\n        Boolean(starsToRefund) && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('ConfirmDialogRemoveFeeRefundStars', {\n              amount: formatStarsAsText(lang, starsToRefund),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n            checked={shouldRefundStars}\n            onCheck={setShouldRefundStars}\n          />\n        )\n      }\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n\n  return {\n    user,\n  };\n})(ChatRefundModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"RichInput\":\"iVOOM94X\",\"richInput\":\"iVOOM94X\",\"RichInputContainer\":\"USQTiOxp\",\"richInputContainer\":\"USQTiOxp\",\"placeholder-text\":\"ImEnkEKm\",\"placeholderText\":\"ImEnkEKm\",\"with-icon\":\"wESx9wwq\",\"withIcon\":\"wESx9wwq\",\"placeholder-icon\":\"LdpU71eT\",\"placeholderIcon\":\"LdpU71eT\",\"touched\":\"I1tjTT9Y\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\n\nimport type { RichInputCtx } from './useRichEditable';\n\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\n\nimport RichEditableAttachment from './RichEditableAttachment';\nimport TextFormatter from './TextFormatter.async';\n\nimport style from './RichInput.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  placeholder?: string;\n  richInputCtx: RichInputCtx;\n  limitRemaining?: number;\n  disablePreview?: boolean;\n};\n\nconst RichInput: FC<OwnProps> = ({\n  richInputCtx, className, placeholder, limitRemaining, disablePreview,\n}) => {\n  const fullClass = buildClassName(className,\n    'form-control',\n    style.RichInput,\n    (limitRemaining !== undefined && limitRemaining < 0) && 'danger');\n  const [isTextFormatterOpen, openTextFormatter, closeTextFormatter] = useFlag();\n\n  useEffect(() => {\n    const sel = richInputCtx.editable.selectionS();\n    if (!sel) return;\n    if (!sel?.collapsed) openTextFormatter();\n  }, [richInputCtx.editable, richInputCtx.editable.selectionS]);\n\n  const isTouched = useDerivedState(\n    () => Boolean(!richInputCtx.editable.emptyS()),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [richInputCtx.editable.emptyS, richInputCtx.editable],\n  );\n\n  return (\n    <div className={style.RichInputContainer}>\n      <div className={fullClass}>\n        <RichEditableAttachment\n          richInputCtx={richInputCtx}\n          placeholder={placeholder}\n        />\n        <span\n          className={buildClassName(\n            style.placeholderText,\n            isTouched && style.touched,\n          )}\n          dir=\"auto\"\n        >\n          {placeholder}\n        </span>\n      </div>\n      {limitRemaining !== undefined && limitRemaining < 10 && (\n        <div\n          style={buildStyle(limitRemaining < 0 && 'color: var(--color-error)')}\n          className=\"max-length-indicator\"\n        >{limitRemaining}\n        </div>\n      )}\n\n      <TextFormatter\n        richInputCtx={richInputCtx}\n        isOpen={isTextFormatterOpen}\n        isActive\n        onClose={closeTextFormatter}\n        disablePreview={disablePreview}\n      />\n    </div>\n  );\n};\n\nexport default memo(RichInput);\n","import { useRichEditable } from './useRichEditable';\n\nexport function useRichInput() {\n  const ctx = useRichEditable();\n\n  return ctx;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LAh8evux\",\"title\":\"yfODVQ1M\",\"description\":\"QaQn08BX\",\"secondary\":\"sQZslvAr\",\"topIcon\":\"jySLtQNG\",\"listItemIcon\":\"hQbEPsTU\",\"content\":\"hrizpMDe\",\"separator\":\"En1zD2cT\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './TableAboutModal.module.scss';\n\nexport type TableAboutData = [IconName | undefined, TeactNode, TeactNode][];\n\ntype OwnProps = {\n  contentClassName?: string;\n  isOpen?: boolean;\n  listItemData?: TableAboutData;\n  headerIconName?: IconName;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  hasBackdrop?: boolean;\n  withSeparator?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableAboutModal = ({\n  isOpen,\n  listItemData,\n  headerIconName,\n  header,\n  footer,\n  buttonText,\n  hasBackdrop,\n  withSeparator,\n  onClose,\n  onButtonClick,\n  contentClassName,\n}: OwnProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName(styles.root, contentClassName)}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      onClose={onClose}\n    >\n      {headerIconName && <div className={styles.topIcon}><Icon name={headerIconName} /></div>}\n      {header}\n      <div>\n        {listItemData?.map(([icon, title, subtitle]) => {\n          return (\n            <ListItem\n              isStatic\n              multiline\n              icon={icon}\n              iconClassName={styles.listItemIcon}\n            >\n              <span className=\"title\">{title}</span>\n              <span className=\"subtitle\">{subtitle}</span>\n            </ListItem>\n          );\n        })}\n      </div>\n      {withSeparator && <Separator className={styles.separator} />}\n      {footer}\n      {buttonText && (\n        <Button size=\"smaller\" onClick={onButtonClick || onClose}>{buttonText}</Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableAboutModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string; withEmojiStatus?: boolean };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  modalHeader?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  hasBackdrop?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  modalHeader,\n  footer,\n  buttonText,\n  className,\n  hasBackdrop,\n  onClose,\n  onButtonClick,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      isSlim\n      header={modalHeader}\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {label && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PeerChip\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  withEmojiStatus={value.withEmojiStatus}\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >{buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +{formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(lang, option.amount, option.currency)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption)) && perUserStarCount && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n"],"names":["memo","withGlobal","global","modal","user","forUserId","selectUser","undefined","StarsGiftModal","closeStarsGiftModal","openInvoice","requestConfetti","getActions","dialogRef","useRef","isOpen","Boolean","renderingModal","useCurrentOrPrev","oldLang","useOldLang","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","option","type","userId","id","stars","currency","amount","handleClose","bottomText","useMemo","parts","split","React","createElement","SafeLink","url","text","Modal","className","buildClassName","styles","modalDialog","contentClassName","content","isSlim","onClose","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","onClick","ariaLabel","Icon","name","header","hiddenHeader","starHeaderText","headerInfo","Fragment","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getPeerTitle","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","StarsGiftingPickerModal","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","getGlobal","users","byId","combinedIds","unique","filteredUserIds","filterPeersByQuery","ids","query","sortChatIds","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","title","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","BalanceBlock","balance","withAddButton","lang","useLang","openStarsBalanceModal","balanceBlock","balanceInfo","smallerText","balanceBottom","StarIcon","formatStarsAmount","BadgeButton","addStarsButton","addStarsIcon","StarsSubscriptionItem","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","photo","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","root","preview","subscriptionStar","info","subtitle","webPhoto","status","statusEnded","statusPricing","star","formatInteger","statusPeriod","getTransactionTitle","transaction","paidMessages","count","withNodes","pluralValue","starRefCommision","formatPercent","isGiftUpgrade","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","isNegativeStarsAmount","customPeer","buildStarsTransactionCustomPeer","titleKey","starsAmount","nanos","SingleMediaThumb","boughtMedia","index","media","video","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","PaidMediaThumb","isTransactionPreview","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","StarsTransactionItem","openStarsTransactionModal","date","transactionPeer","selectOptionalPeer","isUniqueGift","giftSticker","getStickerFromGift","data","avatarPeer","CUSTOM_PEER_PREMIUM","subtitleKey","isRefund","hasFailed","isPending","previewContent","backdrop","getGiftAttributes","backgroundColors","centerColor","edgeColor","RadialPatternBackground","uniqueGiftBackground","AnimatedIconFromSticker","sticker","play","formatDateTimeToString","negative","positive","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS_KEYS","TRANSACTION_ITEM_CLASS","shouldForceHeight","history","all","transactions","starsBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","StarsBalanceModal","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","subscriptions","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","gift","balanceNeeded","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","PAID_MESSAGES_PURPOSE","withMarkdown","shouldShowItems","shouldSuggestGifting","transactionTabs","key","tosText","handleLoadMoreTransactions","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","minimal","modalBalance","starButton","isText","noForcedUpperCase","topupOptions","tos","list","sectionTitle","nextOffset","disabled","isLoading","loadMore","loadMoreIcon","container","Transition","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","noScrollRestoreOnTop","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","paidMedia","paidMediaMessage","paidMediaChat","StarPaymentModal","closeStarsPaymentModal","sendStarPaymentForm","markLoading","unmarkLoading","prevModal","usePrevious","isBotSubscription","canShowPeerItem","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","paymentContent","hasAbsoluteCloseButton","paymentImages","paymentPhoto","avatarStar","PeerBadge","avatarWebPhoto","avatarSize","badgeIcon","badgeText","badgeClassName","amountBadge","paymentImageBackground","PeerChip","botItem","paymentButton","formatStarsAsIcon","asFont","disclaimer","UniqueGiftHeader","modelAttribute","backdropAttribute","patternAttribute","deps","noAnimation","didUpdate","useTransitionActiveKey","subtitleColor","textColor","radialPatternBackdrop","backdropColors","patternColor","patternIcon","slideClassName","direction","style","buildStyle","paidMessageCommission","appConfig","starsPaidMessageCommissionPermille","starCount","starsGiftSticker","selectGiftStickerForStars","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","StarsTransactionModal","showNotification","openMediaViewer","closeStarsTransactionModal","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","starModalData","giftAttributes","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","uniqueGiftHeader","pattern","model","number","regularHeader","noLoop","percent","tableData","peerLabel","push","containerClassName","copyTextToClipboard","footerTextParts","footer","renderingModalData","TableInfoModal","hasBackdrop","buttonText","StarsSubscriptionModal","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","slug","hasBotCancelled","isApiPeerUser","specialReplacement","STARS_ICON_PLACEHOLDER","footerTos","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","StarSlider","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","sendPaidReactionsAsPeerIds","currentUser","PaidReactionModal","closePaidReactionModal","addLocalPaidReaction","loadSendPaidReactionsAs","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldSendAsAnonymous","setShouldSendAsAnonymous","sendAsPeerId","setSendAsPeerId","senderPeer","isMobile","useAppLayout","handleShowInTopSendersChange","target","checked","handleAmountChange","filteredMyReactorIds","unshift","canChangeSendAsPeer","currentReactor","reactions","topReactors","find","reactor","isMy","isAnonymous","includes","handleSend","isPrivate","shouldIgnoreDefaultPrivacy","handleSendAsPeerChange","renderMenuItem","isSelected","MenuItem","itemInfo","FullNameTitle","itemTitle","noFake","noVerified","itemSubtitle","itemIcon","SendAsPeerMenuButton","onTrigger","ripple","sendAsPeerMenuButton","sendAsPeerButtonAvatar","buttonDownIcon","sendAsPeersMenu","DropdownMenu","sendAsPeerMenu","bubbleClassName","sendAsPeerMenuBubble","trigger","positionX","autoClose","hasCurrentSender","myReactorAmount","forEach","isCurrentReactor","localAmount","sender","sort","a","b","chatTitle","isLowStackPriority","sendAsPeersMenuContainer","headerControlPanel","Separator","topLabel","countText","topPeer","topBadge","separator","Checkbox","checkBox","label","buttonStar","theme","selectTheme","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","selectThemeValues","paidMessagesStars","selectPeerPaidMessagesStars","userFullInfo","selectUserFullInfo","isGiftForSelf","areUniqueStarGiftsDisallowed","disallowedGifts","shouldDisallowUniqueStarGifts","shouldDisallowLimitedStarGifts","tabState","selectTabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","giftByStars","sendStarGift","sendPremiumGiftByStars","openGiftUpgradeModal","solutionInputCtx","useRichInput","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","shouldPayForUpgrade","setShouldPayForUpgrade","shouldPayByStars","setShouldPayByStars","customBackgroundValue","useCustomBackground","isStarGift","hasPremiumByStars","isPeerUser","isSelf","localMessage","currentGift","isOutgoing","senderId","action","mediaType","months","isNameHidden","starsToConvert","canUpgrade","alreadyPaidUpgradeStars","upgradeStars","fromId","handleGiftMessageChange","useThrottledCallback","editable","getFormattedText","htmlS","handleShouldHideNameChange","handleShouldPayForUpgradeChange","toggleShouldPayByStars","handleOpenUpgradePreview","giftId","handleGetMoreStars","handleMainButtonClick","shouldUpgrade","canUseStarsPayment","bgClassName","animDivRef","bgRef","usePatternBg","inert","dark","ActionMessage","threadId","MAIN_THREAD_ID","appearanceOrder","RichInput","richInputCtx","placeholder","limitRemaining","disablePreview","ListItem","narrow","Switcher","Link","isPrimary","receiver","renderOptionsSection","formatCurrency","availabilityRemains","PremiumProgress","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","optionByStars","handleGiftClick","perMonth","discount","ceil","tabIndex","role","nonInteractive","caption","renderMonths","pill","fluid","GiftRibbon","observeIntersection","openGiftInfoModal","shouldPlay","isLimited","isSoldOut","useOnIntersect","entry","isIntersecting","withSparkleEffect","starGifts","idsByCategory","StarGiftCategoryList","onCategoryChanged","areLimitedStarGiftsDisallowed","starCategories","keys","category","selectedCategory","setSelectedCategory","renderCategoryItem","handleItemClick","isInteger","renderCategoryName","useHorizontalScroll","runThrottledForScroll","throttle","cb","forPeerId","boostPerSentGift","boostsPerSentGift","starGiftsById","starGiftIdsByCategory","GiftModal","closeGiftModal","transitionRef","giftHeaderRef","scrollerRef","isApiPeerChat","selectedGift","setSelectedGift","shouldShowMainScreenHeader","setShouldShowMainScreenHeader","isMainScreenHeaderForStarGifts","setIsMainScreenHeaderForStarGifts","isGiftScreenHeaderForStarGifts","setIsGiftScreenHeaderForStarGifts","areAllGiftsDisallowed","shouldDisallowPremiumGifts","disallowedGiftTypes","areUnlimitedStarGiftsDisallowed","shouldDisallowUnlimitedStarGifts","allGifts","gifts","filteredGifts","prevGift","giftsByStars","mapGifts","Map","starsGift","STARS_CURRENCY_CODE","set","baseGift","reduce","prev","observe","useIntersectionObserver","rootRef","throttleMs","isDisabled","isGiftScreen","shouldShowHeader","isHeaderForStarGifts","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","renderTextFilters","handleCloseButtonClick","isBackButton","buttonClassName","headerSlide","commonHeaderText","avatars","premiumGiftsGallery","GiftItemPremium","get","starGiftsDescription","starGiftsTransition","filteredGiftIds","starGiftsContainer","GiftItemStar","renderStarGifts","GiftSendingOptions","GiftRecipientPicker","closeGiftRecipientPicker","openGiftModal","idsWithSelf","concat","filteredPeerIds","selectCanGift","selectedId","forceShowSelf","typeGift","isSavedGift","fromPeer","targetPeer","hasAdminRights","getHasAdminRight","currentUserEmojiStatus","emojiStatus","collectibleEmojiStatuses","statuses","starGiftMaxConvertPeriod","tonExplorerUrl","GiftInfoModal","closeGiftInfoModal","changeGiftVisibility","convertGiftToStars","openChatWithInfo","focusMessage","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","renderingFromPeer","renderingTargetPeer","isTargetChat","savedGift","isSender","canConvertDifference","getServerTime","conversionLeft","hasConvertOption","isGiftUnique","canFocusUpgrade","upgradeMsgId","canManage","inputGift","handleFocusUpgraded","giftChat","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenUpgradeModal","SettingsMenuButton","isMenuOpen","renderFooterButton","isShiny","saleDateInfo","firstSaleDate","lastSaleDate","modalData","isConverted","canConvert","isVisibleForMe","uniqueGiftContextMenu","GiftMenuItems","uniqueGiftModalHeader","modalHeader","modalCloseButton","uniqueGift","soldOut","CUSTOM_PEER_HIDDEN","unknown","starsValue","giftValue","starAmountIcon","total","renderTextWithEntities","ownerName","ownerAddress","ownerId","originalDetails","icon","copyIcon","withEmojiStatus","uniqueAttribute","rarityPercent","issued","issuedCount","totalCount","recipientId","openChat","recipient","recipientLink","senderLink","tonLink","giftAddress","footerDescription","shouldSkipModal","ConfirmDialog","confirmHandler","formatStarsAsText","GiftUpgradeModal","closeGiftUpgradeModal","upgradeGift","renderingRecipient","shouldKeepOriginalDetails","setShouldKeepOriginalDetails","previewAttributes","setPreviewAttributes","handleUpgrade","updatePreviewAttributes","sampleAttributes","previousSelection","models","attr","patterns","backdrops","random","getRandomAttributes","useInterval","attributes","getStickerMediaHash","fetch","ApiMediaFormat","BlobUrl","listItemData","onCheck","TableAboutModal","isCurrentUserPremium","selectIsCurrentUserPremium","GiftStatusInfoModal","closeGiftStatusInfoModal","setEmojiStatus","useCustomEmoji","patternDocumentId","onWearClick","customEmoji","mockPeerWithStatus","statusSparklesColor","FRAGMENT_PEER","GIFT_STICKER_SIZE","REM","byKey","hasPassword","twoFaSettings","hint","passwordHint","GiftWithdrawModal","closeGiftWithdrawModal","clearGiftWithdrawError","processStarGiftWithdrawal","shouldShowPassword","setShouldShowPassword","exportDelay","canExportAt","handleSubmit","password","giftPreview","arrow","exportHint","days","getDays","noPassword","PasswordForm","shouldShowSubmit","error","errorKey","withRegular","clearError","isPasswordVisible","shouldResetValue","onChangePasswordVisibility","submitLabel","onSubmit","noop","async","peerGlobalSearch","searchResult","callApi","accountResultIds","globalResultIds","AVATAR_SIZE","contactIds","GiftTransferModal","closeGiftTransferModal","openGiftWithdrawModal","transferGift","setSelectedId","renderingSelectedPeerId","renderingSelectedPeer","orderedChatIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","sortedLocalIds","foundIds","currentResultsQuery","queryFn","debounceTimeout","debouncedQuery","resolverFn","ms","dependencies","isFrozen","updateWhenUnfrozen","useCallback","forceUpdate","useForceUpdate","handleUnfreeze","useHeavyAnimation","getIsHeavyAnimating","useHeavyAnimationFreeze","runDebounced","useRunDebounced","useSyncEffect","useDebouncedMemo","setCurrentResultsQuery","queryCallback","useAsync","Promise","resolve","answer","usePeerSearch","categories","MEMO_EMPTY_ARRAY","peerColorId","handleCategoryChange","displayIds","closeConfirmModal","handleTransfer","transferStars","ignoreFreeze","onSelectedCategoryChange","withPeerUsernames","noScrollRestore","noDefaultTitle","confirmLabel","ChatRefundModal","closeChatRefundModal","addNoPaidMessagesException","shouldRefundStars","setShouldRefundStars","renderingUser","starsToRefund","handleConfirmRemoveFee","shouldRefundCharged","badgeIconClassName","textClassName","clickable","isConfirmDisabled","onConfirm","withPremiumGradient","modalProps","hasButton","_extends","headerClassName","children","fullClass","isTextFormatterOpen","openTextFormatter","closeTextFormatter","sel","selectionS","collapsed","useDerivedState","emptyS","RichEditableAttachment","TextFormatter","useRichEditable","headerIconName","withSeparator","onButtonClick","absoluteCloseButtonColor","isStatic","multiline","iconClassName","headerAvatarPeer","handleOpenChat","clickArg","selectedStarOption","selectedStarCount","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","renderingOptions","canExtend","maxOption","forceShowAll","currentStackedStarsCount","canExtendOptions","isExtended","starsCount","isWide","isOdd","isActiveOption","perUserStarCount","winner","winners","opt","perUserStars","wideOption","optionTop","stackedStars","Array","from","stackedStar","optionBottom","moreOptions","iconDown"],"sourceRoot":""}